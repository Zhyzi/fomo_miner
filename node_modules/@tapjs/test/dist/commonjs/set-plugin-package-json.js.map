{"version":3,"file":"set-plugin-package-json.js","sourceRoot":"","sources":["../../src/set-plugin-package-json.ts"],"names":[],"mappings":";;;AAAA,2BAAwD;AACxD,+BAA8B;AAE9B,MAAM,MAAM,GAAG,CAAC,SAAiB,EAAE,EAAE;IACnC,IAAI,CAAC;QACH,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAClB,IAAA,iBAAY,EAAC,IAAA,cAAO,EAAC,SAAS,EAAE,cAAc,CAAC,EAAE,MAAM,CAAC,CACzD,CAAA;QACD,OAAO,CAAC,CAAC,IAAI,OAAO,CAAC,KAAK,QAAQ,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAA;IACjE,CAAC;IAAC,MAAM,CAAC;QACP,OAAO,EAAE,CAAA;IACX,CAAC;AACH,CAAC,CAAA;AAED;;;;GAIG;AACI,MAAM,oBAAoB,GAAG,CAClC,SAAiB,EACjB,IAAY,EACZ,EAAE;IACF,MAAM,QAAQ,GAAG,IAAA,cAAO,EAAC,SAAS,EAAE,cAAc,CAAC,CAAA;IACnD,MAAM,GAAG,GAAG;QACV,eAAe,EAAE;YACf,aAAa,EAAE,UAAU,IAAI,EAAE;SAChC;KACF,CAAA;IACD,MAAM,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC,CAAA;IACnC,IAAI,SAAS,CAAC,eAAe,EAAE,CAAC,aAAa,CAAC,KAAK,UAAU,IAAI,EAAE,EAAE,CAAC;QACpE,IAAA,WAAM,EAAC,IAAA,cAAO,EAAC,SAAS,EAAE,cAAc,CAAC,EAAE;YACzC,SAAS,EAAE,IAAI;YACf,KAAK,EAAE,IAAI;SACZ,CAAC,CAAA;QACF,IAAA,kBAAa,EACX,QAAQ,EACR,IAAI,CAAC,SAAS,CACZ;YACE,GAAG,GAAG;YACN,GAAG,SAAS;YACZ,eAAe,EAAE;gBACf,GAAG,SAAS,CAAC,eAAe;gBAC5B,GAAG,GAAG,CAAC,eAAe;aACvB;SACF,EACD,IAAI,EACJ,CAAC,CACF,GAAG,IAAI,CACT,CAAA;IACH,CAAC;AACH,CAAC,CAAA;AAhCY,QAAA,oBAAoB,wBAgChC","sourcesContent":["import { readFileSync, rmSync, writeFileSync } from 'fs'\nimport { resolve } from 'path'\n\nconst getPkg = (pluginDir: string) => {\n  try {\n    const p = JSON.parse(\n      readFileSync(resolve(pluginDir, 'package.json'), 'utf8'),\n    )\n    return !p || typeof p !== 'object' || Array.isArray(p) ? {} : p\n  } catch {\n    return {}\n  }\n}\n\n/**\n * call wth the pluginDir and the path to @tapjs/core\n * and it'll make sure that the plugin dir has a package.json\n * that depends on the symlink we're about to create.\n */\nexport const setPluginPackageJson = (\n  pluginDir: string,\n  core: string,\n) => {\n  const pluginPJ = resolve(pluginDir, 'package.json')\n  const pkg = {\n    devDependencies: {\n      '@tapjs/core': `file://${core}`,\n    },\n  }\n  const pluginPkg = getPkg(pluginDir)\n  if (pluginPkg.devDependencies?.['@tapjs/core'] !== `file://${core}`) {\n    rmSync(resolve(pluginDir, 'package.json'), {\n      recursive: true,\n      force: true,\n    })\n    writeFileSync(\n      pluginPJ,\n      JSON.stringify(\n        {\n          ...pkg,\n          ...pluginPkg,\n          devDependencies: {\n            ...pluginPkg.devDependencies,\n            ...pkg.devDependencies,\n          },\n        },\n        null,\n        2,\n      ) + '\\n',\n    )\n  }\n}\n"]}